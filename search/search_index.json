{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"H5MD-NOMAD: A flexible data-storage schema for uploading molecular simulations to NOMAD","text":"<p>Most computational data in NOMAD is harvested with code-specific parsers that recognize the output files from a particular software and retrieve the appropriate (meta)data accordingly. However, this approach is not possible for many modern molecular simulation engines that use fully-flexible scriptable input and non-fixed output files. \"HDF5 for molecular data\" (H5MD) is a data schema for storage of molecular simulation data, based on the HDF5 file format. The following pages describe an extension of the H5MD schema, denoted H5MD-NOMAD, which adds specificity to several of the H5MD guidelines while also retaining reasonable flexbility. This enables simulation data stored according to the H5MD-NOMAD schema to be parsed and nomarlized by NOMAD, while also allowing the user some freedom for customization.</p> <p>Due the new nature of extending upon the original H5MD schema, portions of these doc pages were duplicated, extended, or summarized from the H5MD webpage.</p>"},{"location":"#introduction-to-the-h5md-storage-format","title":"Introduction to the H5MD storage format","text":"<p>H5MD was originally proposed by P. de Buyl, P. H. Colberg and F. H\u00f6fling in H5MD: A structured, efficient, and portable file format for molecular data, Comp. Phys. Comm. 185, 1546\u20131553 (2014) [arXiv:1308.6382]. The schema is maintained, along with associated tools, in a GitHub repository: H5MD GitHub.</p> <p>The basic nomenclature of the H5MD schema relevant for understanding H5MD-NOMAD can be found here: Quick Start - H5MD basics. Moreover, many of the details of the H5MD structure will be necessarily covered through the explanation of H5MD-NOMAD.</p>"},{"location":"units/","title":"Specifying units of datasets in H5MD-NOMAD","text":"<p>In the original H5MD schema, units were given as string attributes of datasets, e.g., <code>60 m s-2</code>. H5MD-NOMAD ammends the treatment of units in 2 ways:</p> <ol> <li> <p>If needed, the leading prefactor is stored as a separate attribute of <code>float</code> datatype called <code>unit_factor</code>.</p> </li> <li> <p>The string that describes the unit should be compatible with the <code>UnitRegistry</code> class of the <code>pint</code> python module.</p> </li> </ol> <p>Generic representation of unit storage in H5MD-NOMAD:</p> <pre><code>&lt;group&gt;\n    \\-- &lt;dataset&gt;\n        +-- (unit: String[])\n        +-- (unit_factor: Float)\n</code></pre>"},{"location":"file_structure/connectivity/","title":"The connectivity group","text":"<p>The initial H5MD proposed a simple and flexible schema for the storage of \"connectivity\" information, e.g., to be used in conjunction with a molecular mechanics force field. The connectivity information is stored as tuples in the group <code>/connectivity</code>. The tuples are pairs, triples, etc. as needed and may be either time-independent or time-dependent. As with other elements, connectivity elements can be defined for particular particle groups. However, H5MD-NOMAD focuses on the storage of connectivity elements for the entire system (i.e., the <code>all</code> particles group).</p>"},{"location":"file_structure/connectivity/#standardized-h5md-nomad-connectivity","title":"Standardized H5MD-NOMAD connectivity","text":"<p>The general structure of the <code>connectivity</code> group is as follows:</p> <pre><code>connectivity\n \\-- (bonds): Integer[N_part][2]\n \\-- (angles): Integer[N_part][3]\n \\-- (dihedrals): Integer[N_part][4]\n \\-- (impropers): Integer[N_part][4]\n \\-- (&lt;custom_interaction&gt;): Integer[N_part][m]\n \\-- (particles_group)\n      \\-- ...\n</code></pre> <p><code>N_part</code> corresponds to the number of particles stored in the <code>particles/all</code> group.</p> <ul> <li> <p><code>bonds</code> : a list of 2-tuples specifying the indices of particles containing a \"bond interaction\".</p> </li> <li> <p><code>angles</code> : a list of 3-tuples specifying the indices of particles containing an \"angle interaction\".</p> </li> <li> <p><code>dihedrals</code> : a list of 4-tuples specifying the indices of particles containing a \"dihedral interaction\".</p> </li> <li> <p><code>impropers</code> : a list of 4-tuples specifying the indices of particles containing an \"improper dihedral interaction\".</p> </li> <li> <p><code>&lt;custom_interaction&gt;</code> : a list of m-tuples specifying the indices of particles containing an arbitrary interaction. <code>m</code> denotes the number of particles involved in the interaction.</p> </li> <li> <p><code>particles_group</code> : See below.</p> </li> </ul> <p> Currently only time-independent connectivity elements are supported.</p>"},{"location":"file_structure/connectivity/#the-particles_group-subgroup","title":"The particles_group subgroup","text":"<p>Despite not fully utilizing the organization of arbitrary groups of particles within the <code>particles</code> group, H5MD-NOMAD allows for the user to provide an arbitrary hierarchy of particle groupings, also refered to as a \"topology\", within the <code>connectivity</code> subgroup called <code>particles_group</code>. This information will be used by NOMAD to facilitate visualizations of the system, through the \"topology bar\" in the overview page. The general structure of the topology group is as follows:</p> <pre><code>connectivity\n \\-- particles_group\n      \\-- &lt;group_1&gt;\n      |    \\-- (type): String[]\n      |    \\-- (formula): String[]\n      |    \\-- indices: Integer[]\n      |    \\-- (is_molecule): Bool\n |    |    \\-- (&lt;custom_dataset&gt;): &lt;type&gt;[]\n      |    \\-- (particles_group):\n      |        \\-- ...\n      \\-- &lt;group_2&gt;\n          \\-- ...\n</code></pre> <p>The initial <code>particles_group</code> subgroup, directly under <code>connectivity</code>, is a container for the entire topology. <code>particles_group</code> contains a series of subgroups with arbitrary names, which denote the first level of organization within the topology. The name of each subgroup will become the group label within the NOMAD metadata. Each of these subgroups then contain a series of datasets:</p> <ul> <li> <p><code>type</code> : describes the type of particle group. There exist a list of standardized types: <code>molecule_group</code>, <code>molecule</code>, <code>monomer_group</code>, <code>monomer</code>. However, arbitrary types can be given. We suggest that you 1. use the standardized types when appropriate (note that protein residues should be generically typed as <code>monomer</code>) and 2. use the general format <code>&lt;type&gt;_group</code> for groups of a distinct type (see further description of suggested hierarchy below).</p> </li> <li> <p><code>formula</code> : a \"chemical-like\" formula that describes the particle group with respect to its underlying components. The format for the formula is <code>&lt;child_1&gt;(n_child_1)&lt;child_2&gt;(n_child_2)...</code>, where <code>&lt;child_x&gt;</code> is the name/label of the underlying component, and <code>n_child_x</code> is the number of such components found within this particle group. Example: A particles group containing 100 water molecules named <code>water</code> has the formula <code>water(100)</code>, whereas each underlying water molecule has the standard chemical formula <code>H2O</code>.</p> </li> <li> <p><code>indices</code> : a list of integer indices corresponding to all particles belonging to this group. Indices should correspond to the list of particles stored in the <code>particles/all</code> group.</p> </li> <li> <p><code>is_molecule</code> : indicator of individual molecules (typically with respect to the bond connections defined by a force field).</p> </li> <li> <p><code>custom_dataset</code> : arbitrary additional metadata for this particle group may be given.</p> </li> </ul> <p>Each subgroup may also contain a (nested) <code>particles_group</code> subgroup, in order to subdivide the group of particles into a organizational hierarchy. As with the overall <code>particles_group</code> container, the groups contained within <code>particles_group</code> must not partition the particles within this group (i.e., overlapping or non-complete grouping are allowed). However, particle groups must contain particles already contained within the parent <code>particles_group</code> (i.e., subgroups must be a subset of the grouping at the previous level of the hierarchy).</p> <p>Note that typically the <code>particles_group</code> hierarchy ends at the level of individual particles (i.e., individual particles are not stored, since this information is already contained within the <code>particles</code> group).</p>"},{"location":"file_structure/h5md/","title":"H5MD metadata","text":"<p>A set of global metadata describing the H5MD structure is stored in the <code>h5md</code> group as attributes. The contents of the group is:</p> <pre><code>h5md\n +-- version: Integer[2]\n \\-- author\n |    +-- name: String[]\n |    +-- (email: String[])\n \\-- creator\n |    +-- name: String[]\n |    +-- version: String[]\n \\-- program\n      +-- name: String[]\n      +-- version: String[]\n</code></pre> <p><code>version</code> :   An attribute, of <code>Integer</code> datatype and of simple dataspace of rank 1 and     size 2, that contains the major version number and the minor version number     of the H5MD specification the H5MD structure conforms to.</p> <p>The version x.y.z of the H5MD specification follows [semantic versioning][semver] [@semantic_versioning]: A change of the major version number x indicates backwards-incompatible changes to the file structure. A change of the minor version number y indicates backwards-compatible changes to the file structure. A change of the patch version number z indicates changes that have no effect on the file structure and serves to allow for clarifications or minor text editing of the specification.</p> <p>As the z component has no impact on the content of a H5MD file, the <code>version</code> attribute contains only x and y.</p> <p><code>author</code> :   A group that contains metadata on the person responsible for the simulation     (or the experiment) as follows:</p> <ul> <li> <p><code>name</code> :   An attribute, of fixed-length string datatype and of scalar     dataspace, that holds the author's real name.</p> </li> <li> <p><code>email</code> :   An optional attribute, of fixed-length string datatype and     of scalar dataspace, that holds the author's email address of     the form <code>email@domain.tld</code>.</p> </li> </ul> <p><code>creator</code> :   A group that contains metadata on the program that created the H5MD     structure as follows:</p> <ul> <li> <p><code>name</code> :   An attribute, of fixed-length string datatype and of scalar     dataspace, that stores the name of the program.</p> </li> <li> <p><code>version</code> :   An attribute, of fixed-length string datatype and of scalar     dataspace, that yields the version of the program.</p> </li> </ul> <p><code>program</code> :   A group that contains metadata on the code/package that created the simulation data contained within this H5MD structure:</p> <ul> <li> <p><code>name</code> :   An attribute, of fixed-length string datatype and of scalar     dataspace, that stores the name of the program.</p> </li> <li> <p><code>version</code> :   An attribute, of fixed-length string datatype and of scalar     dataspace, that yields the version of the program.</p> </li> </ul>"},{"location":"file_structure/h5md/#modules-currently-unused-in-h5md-nomad","title":"Modules (currently unused in H5MD-NOMAD)","text":"<p>The original H5MD specification allowed the definition of modules under the h5md group. Such modules are currently ignored when uploading to NOMAD, although they of course will remain present in the raw uploaded hdf5 file.</p>"},{"location":"file_structure/observables/","title":"The observables group","text":"<p>The initial H5MD proposed a simple and flexible schema for the general storage of observable info, defined roughly as \"macroscopic observables\" or \"averages of a property over many particles\", as H5MD elements:</p> <pre><code>observables\n \\-- &lt;observable1&gt;\n |    \\-- step: Integer[N_frames]\n |    \\-- time: Float[N_frames]\n |    \\-- value: &lt;type&gt;[N_frames]\n \\-- &lt;observable2&gt;\n |    \\-- step: Integer[N_frames]\n |    \\-- time: Float[N_frames]\n |    \\-- value: &lt;type&gt;[N_frames][D]\n \\-- &lt;group1&gt;\n |    \\-- &lt;observable3&gt;\n |         \\-- step: Integer[N_frames]\n |         \\-- time: Float[N_frames]\n |         \\-- value: &lt;type&gt;[N_frames][D][D]\n \\-- &lt;observable4&gt;: &lt;type&gt;[]\n \\-- ...\n</code></pre> <p></p> <p>As depicted above, observables representing only a subset of the particles may be stored in appropriate subgroups similarly to the <code>particles</code> tree. H5MD-NOMAD does support the organization of observables into subgroups (as discussed in more detail below). However, grouping by particle groups is not fully supported in the sense that there is currently no metadata storing the corresponding indices of the relevant particles subgroup. Additionally, since only the <code>all</code> particles group is parsed, information about the named subgroup will not be stored anywhere in the archive. Thus, we recommend for now that only observables relevant to the <code>all</code> particles subgroup are stored within this section.</p>"},{"location":"file_structure/observables/#h5md-nomad-observables","title":"H5MD-NOMAD observables","text":"<p>H5MD-NOMAD extends H5MD observable storage by 1. specifying standard observable types with associated metadata and 2. providing standarized specifications for some common observables. The observable type is provided as an attribute to the particular observable subgroup:</p> <pre><code>observables\n \\-- &lt;observable_subgroup&gt;\n |    +-- type: String[]\n |    \\-- ...\n \\-- ...\n</code></pre> <p>The following observable types are supported:</p> <p><code>configurational</code> :   An observable that is computed for each individual configuration, with the following general structure:</p> <pre><code>observables\n \\-- &lt;configurational_subgroup&gt;\n |    +-- type: \"configurational\"\n |    \\-- step: Integer[N_frames]\n |    \\-- time: Float[N_frames]\n |    \\-- value: &lt;type&gt;[N_frames][M]\n \\-- ...\n</code></pre> <p>where <code>M</code> is the dimension of the observable. This section may also be used to store per-particle quantities/attributes that are not currently supported as standardized H5MD-NOMAD elements for particles group, in which case <code>value</code> will have dimensions <code>[N_frames][N_part][M]</code>.</p> <p>A list of standardized configurational observables can be found HERE.</p> <p><code>ensemble_average</code> :   An observable that is computed by averaging over multiple configurations, with the following generic structure:</p> <pre><code>observables\n \\-- &lt;ensemble_average_subgroup&gt;\n |    +-- type: \"ensemble_average\"\n |    \\-- (label): String[]\n |    \\-- (n_variables): Integer\n |    \\-- (variables_name): String[n_variables][]\n |    \\-- (n_bins): Integer[]\n |    \\-- bins: Float[n_bins][]\n |    \\-- value: &lt;type&gt;[n_bins][]\n |    \\-- (frame_start): Integer\n |    \\-- (frame_end): Integer\n |    \\-- (n_smooth): Integer\n |    \\-- (type): String[]\n |    \\-- (error_type): String[]\n |    \\-- (errors): Float[n_bins]\n |    \\-- (error_labels): String[]\n |    \\-- (frame_end): Integer\n |    \\-- (&lt;custom_dataset&gt;): &lt;type&gt;[]\n \\-- ...\n</code></pre> <ul> <li> <p><code>label</code> :   describes the particles involved in determining the property. For example, for a radial distribution function between particles of type <code>A</code> and <code>B</code>, <code>label</code> might be set to <code>A-B</code></p> </li> <li> <p><code>n_variables</code> :   dimensionality of the observable. Can also be infered from leading dimension of <code>bins</code>.</p> </li> <li> <p><code>variables_name</code> :   name/description of the independent variables along which the observable is defined.</p> </li> <li> <p><code>n_bins</code> :   number of bins along each dimension of the observable. Either single Integer for 1-D observables, or a list of Integers for multi-dimensional observable. Can also be infered from dimensions of <code>bins</code>.</p> </li> <li> <p><code>bins</code> :   value of the bins used for calculating the observable along each dimension of the observable.</p> </li> <li> <p><code>value</code> :   value of the calculated ensemble average at each bin.</p> </li> <li> <p><code>frame_start</code> :   trajectory frame index at which the averaging begins. This index must correspond to the list of steps and times in <code>particles.all.position</code>.</p> </li> <li> <p><code>frame_end</code> :   trajectory frame index at which the averaging ends. This index must correspond to the list of steps and times in <code>particles.all.position</code>.</p> </li> <li> <p><code>n_smooth</code> :   number of bins over which the running average was computed for <code>value</code>.</p> </li> <li> <p><code>type</code> :   Allowed values of <code>molecular</code> or <code>atomic</code>. Categorizes if the observable is calculated at the molecular or atomic level.</p> </li> </ul> <ul> <li> <p><code>error_type</code> :   describes the type of error reported for this observable. Examples: <code>Pearson correlation coefficient</code>, <code>mean squared error</code>.</p> </li> <li> <p><code>errors</code> :   value of the error at each bin. Can be multidimensional with corresponding label stored in <code>error_labels</code>.</p> </li> <li> <p><code>error_labels</code> :   describes the error along individual dimensions for multi-D errors.</p> </li> <li> <p><code>&lt;custom_dataset&gt;</code> :   additional metadata may be given as necessary.</p> </li> </ul> <p>A list of standardized ensemble average observables can be found HERE.</p> <p><code>time_correlation</code> :   An obervable that is computed by calculating correlations between configurations in time, with the following general structure:</p> <pre><code>observables\n \\-- &lt;time_correlation_subgroup&gt;\n |    +-- type: \"time_correlation\"\n |    \\-- (label): String[]\n |    \\-- (direction): String[]\n |    \\-- (n_times): Integer[]\n |    \\-- times: Float[n_times][]\n |    \\-- value: &lt;type&gt;[n_bins][]\n |    \\-- (type): String[]\n |    \\-- (error_type): String[]\n |    \\-- (errors): Float[n_bins]\n |    \\-- (error_labels): String[]\n |    \\-- (&lt;custom_dataset&gt;): &lt;type&gt;[]\n \\-- ...\n</code></pre> <ul> <li> <p><code>label</code> :   describes the particles involved in determining the property. For example, for a radial distribution function between particles of type <code>A</code> and <code>B</code>, <code>label</code> might be set to <code>A-B</code></p> </li> <li> <p><code>direction</code> :   allowed values of <code>x</code>, <code>y</code>, <code>z</code>, <code>xy</code>, <code>yz</code>, <code>xz</code>, <code>xyz</code>. The direction/s used for calculating the correlation function.</p> </li> <li> <p><code>n_times</code> :   number of times windows for the calculation of the correlation function. Can also be infered from dimensions of <code>times</code>.</p> </li> <li> <p><code>times</code> :   time values used for calculating the correlation function (i.e., \u0394t values).</p> </li> <li> <p><code>value</code> :   value of the calculated correlation function at each time.</p> </li> <li> <p><code>type</code> :   Allowed values of <code>molecular</code> or <code>atomic</code>. Categorizes if the observable is calculated at the molecular or atomic level.</p> </li> </ul> <ul> <li> <p><code>error_type</code> :   describes the type of error reported for this observable. Examples: <code>Pearson correlation coefficient</code>, <code>mean squared error</code>.</p> </li> <li> <p><code>errors</code> :   value of the error at each bin. Can be multidimensional with corresponding label stored in <code>error_labels</code>.</p> </li> <li> <p><code>error_labels</code> :   describes the error along individual dimensions for multi-D errors.</p> </li> <li> <p><code>&lt;custom_dataset&gt;</code> :   additional metadata may be given as necessary.</p> </li> </ul> <p>A list of standardized configurational observables can be found HERE.</p>"},{"location":"file_structure/particles/","title":"The particles group","text":"<p>Particle attributes, i.e., information about each particle in the system, are stored within the <code>particles</code> group. According to the original H5MD schema, the <code>particles</code> group is a container for subgroups that represent different subsets of the system under consideration. For simplicity of parsing, H5MD-NOMAD currently requires one such group, labeled <code>all</code>, to contain all the particles and corresponding attributes to be stored in the NOMAD archive. Additional particle groups will be ignored.</p> <p>For each dataset, the ordering of indices (whenever relevant) are as follows: frame index, particle index, dimension index. Thus, the contents of the <code>particles</code> group for a trajectory with <code>N_frames</code> frames and <code>N_part</code> particles in a <code>D</code>-dimensional space can be represented:</p> <pre><code>particles\n \\-- all\n |    \\-- box\n |    \\-- (&lt;time-dependent_vector_attribute&gt;)\n |    |    \\-- step: Integer[N_frames]\n |    |    \\-- time: Float[N_frames]\n |    |    \\-- value: &lt;type&gt;[N_frames][N_part][D]\n |    \\-- (&lt;time-dependent_scalar_attribute&gt;)\n |    |    \\-- step: Integer[N_frames]\n |    |    \\-- time: Float[N_frames]\n |    |    \\-- value: &lt;type&gt;[N_frames][N_part]\n |    \\-- (&lt;time-independent_vector_attribute&gt;): &lt;type&gt;[N_part][D]\n |    \\-- (&lt;time-independent_scalar_attribute&gt;): &lt;type&gt;[N_part]\n |    \\-- ...\n \\-- &lt;group2&gt;\n      \\-- ...\n</code></pre>"},{"location":"file_structure/particles/#standardized-h5md-elements-for-particles-group","title":"Standardized H5MD elements for particles group","text":"<p><code>position</code> :   (required for parsing other particle attributes) An element that describes the particle positions as coordinate vectors of <code>Float</code> or <code>Integer</code> type.</p> <p><code>velocity</code> :   An element that contains the velocities for each particle as a vector of     <code>Float</code> or <code>Integer</code> type.</p> <p><code>force</code> :   An element that contains the total forces (i.e., the accelerations     multiplied by the particle mass) for each particle as a vector of <code>Float</code>     or <code>Integer</code> type.</p> <p><code>mass</code> :   An element that holds the mass for each particle as a scalar of <code>Float</code>     type.</p> <p><code>image</code> :   (currently unused in H5MD-NOMAD) An element that represents periodic images of the box as coordinate vectors of <code>Float</code> or <code>Integer</code> type and allows one to compute for each particle its absolute position in space. If <code>image</code> is present, <code>position</code> must be present as well. For time-dependent data, the <code>step</code> and <code>time</code> datasets of <code>image</code> must equal those of <code>position</code>, which must be accomplished by hard-linking the respective datasets.</p> <p><code>species</code> :   (currently unused in H5MD-NOMAD) An element that describes the species for each particle, i.e., its atomic or chemical identity, as a scalar of <code>Enumeration</code> or <code>Integer</code> data type. Particles of the same species are assumed to be identical with respect to their properties and unbonded interactions.</p> <p><code>id</code> :   (currently unused in H5MD-NOMAD) An element that holds a scalar identifier for each particle of <code>Integer</code> type, which is unique within the given particle subgroup. The <code>id</code> serves to identify particles over the course of the simulation in the case when the order of the particles changes, or when new particles are inserted and removed. If <code>id</code> is absent, the identity of the particles is given by their index in the <code>value</code> datasets of the elements within the same subgroup.</p> <p><code>charge</code> :   An element that contains the charge associated to each particle as a     scalar, of <code>Integer</code> or <code>Float</code> type.</p>"},{"location":"file_structure/particles/#standardized-h5md-nomad-elements-for-particles-group","title":"Standardized H5MD-NOMAD elements for particles group","text":"<p><code>species_label</code> :    An element that holds a label (fixed-length string datatype) for each particle. This label denotes the fundamental species type of the particle (e.g., the chemical element label for atoms), regardless of its given interactions within the model. Both time-independent and time-dependent <code>species_label</code> elements are supported.</p> <p><code>model_label</code> :   An element that holds a label (fixed-length string datatype) for each particle. This label denotes the type of particle with respect to the given interactions within the model (e.g., force field) Currently only time-independent species labels are supported.</p>"},{"location":"file_structure/particles/#non-standard-elements-in-particles-group","title":"Non-standard elements in particles group","text":"<p>All non-standard elements within the particles group are currently igorned by the NOMAD H5MD parser. In principle, one can store additional custom attributes as configuration-specific observables (see The observables group).</p>"},{"location":"file_structure/particles/#the-simulation-box-subgroup","title":"The simulation box subgroup","text":"<p>Information about the simulation box is stored in a subgroup named <code>box</code>, within the relevant particles group (<code>all</code> in our case). Both time-independent and time-dependent box information are supported (i.e. via the <code>edges</code> element). Because the <code>box</code> group is specific to a particle group of particles, time-dependent boxes must contain <code>step</code> and <code>time</code> datasets that exactly match those of the corresponding <code>position</code> group. In principal, this should be accomplished by hard-linking the respective datasets. In practice, H5MD-NOMAD currently assumes that this is the case (i.e., the box group <code>step</code> and <code>time</code> information is unused), and simply checks that <code>edges.value</code> has the same leading dimension as <code>position</code>.</p> <p>The structure of the <code>box</code> group is as follows:</p> <pre><code>particles\n \\-- all\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- (edges)\n</code></pre> <p><code>dimension</code> :   An attribute that stores the spatial dimension <code>D</code> of the simulation box     and is of <code>Integer</code> datatype and scalar dataspace.</p> <p><code>boundary</code> :    An attribute, of boolean datatype (changed from string to boolean in H5MD-NOMAD) and of simple dataspace of rank 1 and size <code>D</code>, that specifies the boundary condition of the box along each dimension, i.e., <code>True</code> implies periodic boundaries are applied in the corresponding dimension. If all values in <code>boundary</code> are <code>False</code>, <code>edges</code> may be omitted.</p> <p><code>edges</code> :   A <code>D</code>-dimensional vector or a <code>D</code> \u00d7 <code>D</code> matrix, depending on the geometry of the box, of <code>Float</code> or <code>Integer</code> type. Only cuboid and triclinic boxes are allowed. If <code>edges</code> is a vector, it specifies the space diagonal of a cuboid-shaped box. If <code>edges</code> is a matrix, the box is of triclinic shape with the edge vectors given by the rows of the matrix. For a time-dependent box, a cuboid geometry is encoded by a dataset <code>value</code> (within the H5MD element) of rank 2 (1 dimension for the time and 1 for the vector) and a triclinic geometry by a dataset <code>value</code> of rank 3 (1 dimension for the time and 2 for the matrix). For a time-independent box, a cuboid geometry is encoded by a dataset <code>edges</code> of rank 1 and a triclinic geometry by a dataset of rank 2.</p> <p>For instance, a cuboid box that changes in time would appear as:</p> <pre><code>particles\n \\-- all\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- edges\n                \\-- step: Integer[variable]\n                \\-- time: Float[variable]\n                \\-- value: &lt;type&gt;[variable][D]\n</code></pre> <p>where <code>dimension</code> is equal to <code>D</code>. A triclinic box that is fixed in time would appear as:</p> <pre><code>particles\n \\-- all\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- edges: &lt;type&gt;[D][D]\n</code></pre> <p>where <code>dimension</code> is equal to <code>D</code>.</p>"},{"location":"file_structure/root/","title":"Root level","text":"<p>The root level of H5MD-NOMAD structure is organized as follows (identical to the original H5MD specification):</p> <pre><code>H5MD-NOMAD root\n \\-- h5md\n \\-- (particles)\n \\-- (observables)\n \\-- (connectivity)\n \\-- (parameters)\n</code></pre> <p><code>h5md</code> :   A group that contains metadata and information on the H5MD structure     itself. It is the only mandatory group at the root level of H5MD.</p> <p><code>particles</code> :   An optional group that contains information on each particle in the system,     e.g., a snapshot of the positions or the full trajectory in phase space.</p> <p><code>observables</code> :   An optional group that contains other quantities of interest, e.g.,     physical observables that are derived from the system state at given points     in time.</p> <p><code>connectivity</code> :   An optional group that contains information about the connectivity between particles.</p> <p><code>parameters</code> :   An optional group that contains application-specific, custom data such as     control parameters or simulation scripts.</p>"},{"location":"file_structure/structure/","title":"Structure","text":""},{"location":"file_structure/structure/#h5md-root-level","title":"H5MD root level","text":"<p>The root level of an H5MD structure holds a number of groups and is organized as follows:</p> <pre><code>H5MD root\n \\-- h5md\n \\-- (particles)\n \\-- (observables)\n \\-- (connectivity)\n \\-- (parameters)\n</code></pre> <p><code>h5md</code> :   A group that contains metadata and information on the H5MD structure     itself. It is the only mandatory group at the root level of H5MD.</p> <p><code>particles</code> :   An optional group that contains information on each particle in the system,     e.g., a snapshot of the positions or the full trajectory in phase space.     The size of the stored data scales linearly with the number of particles     under consideration.</p> <p><code>observables</code> :   An optional group that contains other quantities of interest, e.g.,     physical observables that are derived from the system state at given points     in time. The size of stored data is typically independent of the system     size.</p> <p><code>connectivity</code> :   An optional group that contains the connectivity between particles.</p> <p><code>parameters</code> :   An optional group that contains application-specific, custom data such as     control parameters or simulation scripts.</p> <p>In subsequent sections, the examples of HDF5 organization may start at the group level, omitting the display of <code>H5MD root</code>.</p>"},{"location":"file_structure/structure/#h5md-metadata","title":"H5MD metadata","text":"<p>A set of global metadata describing the H5MD structure is stored in the <code>h5md</code> group as attributes. The contents of the group is:</p> <pre><code>h5md\n +-- version: Integer[2]\n \\-- author\n |    +-- name: String[]\n |    +-- (email: String[])\n \\-- creator\n      +-- name: String[]\n      +-- version: String[]\n</code></pre> <p><code>version</code> :   An attribute, of <code>Integer</code> datatype and of simple dataspace of rank 1 and     size 2, that contains the major version number and the minor version number     of the H5MD specification the H5MD structure conforms to.</p> <pre><code>The version *x.y.z* of the H5MD specification follows\n[semantic versioning][semver] [@semantic_versioning]: A change of the major\nversion number *x* indicates backwards-incompatible changes to the file\nstructure. A change of the minor version number *y* indicates\nbackwards-compatible changes to the file structure. A change of the patch\nversion number *z* indicates changes that have no effect on the file\nstructure and serves to allow for clarifications or minor text editing of\nthe specification.\n\nAs the *z* component has no impact on the content of a H5MD file, the\n`version` attribute contains only *x* and *y*.\n</code></pre> <p><code>author</code> :   A group that contains metadata on the person responsible for the simulation     (or the experiment) as follows:</p> <pre><code>`name`\n:   An attribute, of fixed-length string datatype and of scalar\n    dataspace, that holds the author's real name.\n\n`email`\n:   An optional attribute, of fixed-length string datatype and\n    of scalar dataspace, that holds the author's email address of\n    the form `email@domain.tld`.\n</code></pre> <p><code>creator</code> :   A group that contains metadata on the program that created the H5MD     structure as follows:</p> <pre><code>`name`\n:   An attribute, of fixed-length string datatype and of scalar\n    dataspace, that stores the name of the program.\n\n`version`\n:   An attribute, of fixed-length string datatype and of scalar\n    dataspace, that yields the version of the program.\n</code></pre>"},{"location":"file_structure/structure/#modules","title":"Modules","text":"<p>The H5MD specification can be complemented by modules specific to a domain of research.  A module may define additional data elements within the H5MD structure, add conditions that the data must satisfy, or define rules for their semantic interpretation. Multiple modules may be present, as long as their prescriptions are not contradictory. Each module is identified by a name and a version number.</p> <p>The modules that apply to a specific H5MD structure are stored as subgroups within the group <code>h5md/modules</code>. Each module holds its version number as an attribute, further module-specific information may be stored:</p> <pre><code>h5md\n \\-- (modules)\n      \\-- &lt;module1&gt;\n      |    +-- version: Integer[2]\n      \\-- &lt;module2&gt;\n      |    +-- version: Integer[2]\n      \\-- ...\n</code></pre> <p><code>version</code> :   An attribute, of <code>Integer</code> datatype and of simple dataspace of rank 1 and     size 2, that contains the major version number and the minor version number     of the module.</p> <pre><code>The version *x.y.z* of an H5MD module follows [semantic versioning][semver]\n[@semantic_versioning] and again only the components *x* and *y* are\nstored, see `h5md/version` in \"[H5MD metadata].\"\n</code></pre>"},{"location":"file_structure/structure/#particles-group","title":"Particles group","text":"<p>Information on each particle, i.e., particle trajectories, is stored in the <code>particles</code> group. The <code>particles</code> group is a container for subgroups that represent different subsets of the system under consideration, and it may hold one or several subgroups, as needed. These subsets may overlap and their union may be incomplete, i.e., not represent all particles of the simulation volume. The subgroups contain the trajectory data for each particle as time-dependent or time-independent data, depending on the situation. Each subgroup contains a specification of the simulation box, see below. For each dataset, the particle index is accommodated by the second (first, in the case of time-independence) array dimension.</p> <p>The contents of the <code>particles</code> group assuming <code>N</code> particles in <code>D</code>-dimensional space could be the following:</p> <pre><code>particles\n \\-- &lt;group1&gt;\n      \\-- box\n      \\-- (position)\n      |    \\-- step: Integer[variable]\n      |    \\-- time: Float[variable]\n      |    \\-- value: &lt;type&gt;[variable][N][D]\n      \\-- (image)\n      |    \\-- step: Integer[variable]\n      |    \\-- time: Float[variable]\n      |    \\-- value: &lt;type&gt;[variable][N][D]\n      \\-- (species: Enumeration[N])\n      \\-- ...\n</code></pre> <p>The following identifiers for H5MD elements are standardized:</p> <p><code>position</code> :   An element that describes the particle positions as coordinate vectors of     <code>Float</code> or <code>Integer</code> type.</p> <pre><code>If the component $k$ of `box/boundary` (see [below](#simulation-box)) is set\nto `none`, the data indicate for each particle the component $k$ of its\nabsolute position in space. If the component $k$ of `box/boundary` is set to\n`periodic`, the data indicate for each particle the component $k$ of the\nabsolute position in space of an *arbitrary* periodic image of that particle.\n</code></pre> <p><code>image</code> :   An element that represents periodic images of the box as coordinate vectors     of <code>Float</code> or <code>Integer</code> type and allows one to compute for each particle its     absolute position in space. If <code>image</code> is present, <code>position</code> must be     present as well. For time-dependent data, the <code>step</code> and <code>time</code> datasets of     <code>image</code> must equal those of <code>position</code>, which must be accomplished by     hard-linking the respective datasets.</p> <pre><code>If the component $k$ of `box/boundary` (see [below](#simulation-box)) is set\nto `none`, the values of the corresponding component $k$ of `image` serve as\nplaceholders. If the component $k$ of `box/boundary` is set to `periodic`,\nfor a cuboid box, the component $k$ of the absolute position of particle $i$\nis computed as $R_{ik} = r_{ik} + L_k a_{ik}$, where $\\vec r_i$ is taken\nfrom `position`, $\\vec a_i$ is taken from `image`, and $\\vec L$ from\n`box/edges`.\n</code></pre> <p><code>velocity</code> :   An element that contains the velocities for each particle as a vector of     <code>Float</code> or <code>Integer</code> type.</p> <p><code>force</code> :   An element that contains the total forces (i.e., the accelerations     multiplied by the particle mass) for each particle as a vector of <code>Float</code>     or <code>Integer</code> type.</p> <p><code>mass</code> :   An element that holds the mass for each particle as a scalar of <code>Float</code>     type.</p> <p><code>species</code> :   An element that describes the species for each particle, i.e., its     atomic or chemical identity, as a scalar of <code>Enumeration</code> or <code>Integer</code>     data type. Particles of the same species are assumed to be identical with     respect to their properties and unbonded interactions.</p> <p><code>id</code> :   An element that holds a scalar identifier for each particle of <code>Integer</code>     type, which is unique within the given particle subgroup. The <code>id</code> serves     to identify particles over the course of the simulation in the case when     the order of the particles changes, or when new particles are inserted and     removed. If <code>id</code> is absent, the identity of the particles is given by their     index in the <code>value</code> datasets of the elements within the same subgroup.</p> <pre><code>A *fill value* (see\n[\u00a7 6.6](http://www.hdfgroup.org/HDF5/doc/UG/11_Datatypes.html#Fvalues) in\n[@HDF5_users_guide]) may be defined for `id/value` upon dataset creation.\nWhen the identifier of a particle is equal to this user-defined value,\nthe particle is considered non-existing, the entry serves as a\nplaceholder. This permits the storage of subsystems whose number of\nparticles varies in time. For the case of varying particle number, the\ndimension denoted by `[N]` above may be variable.\n</code></pre> <p><code>charge</code> :   An element that contains the charge associated to each particle as a     scalar, of <code>Integer</code> or <code>Float</code> type.</p> <pre><code>`charge` has the optional attribute `type` of fixed-length string datatype\nand of scalar dataspace, possible values are `effective` and `formal`. In\nthe case `effective`, the charge is part of an effective description of the\ninteractions with the precise meaning depending on the underlying empirical\nforce fields or coarse-grained models.\n\nIn the case `formal`, the charge is the so-called \"formal charge\" assigned\nto an atom (see &lt;http://en.wikipedia.org/wiki/Formal_charge&gt;) and must be\nof `Integer` type. This case corresponds to the entries in PDB files (see\ndefinition in the PDBx/mmCIF dictionary\n&lt;http://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v40.dic/Items/_atom_site.pdbx_formal_charge.html&gt;).\n\nIf none of `effective` or `formal` describes the data properly, the\nattribute `type` may be omitted.\n</code></pre>"},{"location":"file_structure/structure/#simulation-box","title":"Simulation box","text":"<p>The specification of the simulation box is stored in the group <code>box</code>, which must be contained within each of the subgroups of the <code>particles</code> group. Storing the box information at several places reflects the fact that different subgroups may be sampled at different time grids. This way, the box information remains associated to a group of particles.  A specific requirement for <code>box</code> groups inside <code>particles</code> is that the <code>step</code> and <code>time</code> datasets exactly match those of the corresponding <code>position</code> groups, which must be accomplished by hard-linking the respective datasets.</p> <p>The spatial dimension and the boundary conditions of the box are stored as attributes to the <code>box</code> group, e.g., :</p> <pre><code>particles\n \\-- &lt;group1&gt;\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- (edges)\n</code></pre> <p><code>dimension</code> :   An attribute that stores the spatial dimension <code>D</code> of the simulation box     and is of <code>Integer</code> datatype and scalar dataspace.</p> <p><code>boundary</code> :   An attribute, of fixed-length string datatype and of simple dataspace of     rank 1 and size <code>D</code>, that specifies the boundary condition of the box along     each dimension. The values in <code>boundary</code> are either <code>periodic</code> or <code>none</code>:</p> <pre><code>`periodic` The simulation box is periodically continued along the given\ndimension and serves as the unit cell for an infinite tiling of space.\n\n`none` No boundary condition is imposed. This summarizes the situations of\nopen systems (i.e., an infinitely large box) and closed systems (e.g., due\nto an impenetrable wall). For those components where `boundary` is set to\n`none`, the corresponding values of `edges` serve as placeholders.\n</code></pre> <p>Information on the geometry of the box edges is stored as an H5MD element, allowing for the box to be fixed in time or not.  Supported box shapes are the cuboid and triclinic unit cell, for other shapes a transformation to the triclinic shape may be considered [@Bekker:1997]. If all values in <code>boundary</code> are <code>none</code>, <code>edges</code> may be omitted.</p> <p><code>edges</code> :   A <code>D</code>-dimensional vector or a <code>D</code> \u00d7 <code>D</code> matrix, depending on the geometry     of the box, of <code>Float</code> or <code>Integer</code> type. If <code>edges</code> is a vector, it     specifies the space diagonal of a cuboid-shaped box. If <code>edges</code> is a     matrix, the box is of triclinic shape with the edge vectors given by the     rows of the matrix.</p> <pre><code>For a time-dependent box, a cuboid geometry is encoded by a dataset `value`\n(within the H5MD element) of rank 2 (1 dimension for the time and 1 for the\nvector) and a triclinic geometry by a dataset `value` of rank 3 (1\ndimension for the time and 2 for the matrix).\n\nFor a time-independent box, a cuboid geometry is encoded by a dataset\n`edges` of rank 1 and a triclinic geometry by a dataset of rank 2.\n</code></pre> <p>For instance, a cuboid box that changes in time would appear as:</p> <pre><code>particles\n \\-- &lt;group1&gt;\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- edges\n                \\-- step: Integer[variable]\n                \\-- time: Float[variable]\n                \\-- value: &lt;type&gt;[variable][D]\n</code></pre> <p>where <code>dimension</code> is equal to <code>D</code>. A triclinic box that is fixed in time would appear as:</p> <pre><code>particles\n \\-- &lt;group1&gt;\n      \\-- box\n           +-- dimension: Integer[]\n           +-- boundary: String[D]\n           \\-- edges: &lt;type&gt;[D][D]\n</code></pre> <p>where <code>dimension</code> is equal to <code>D</code>.</p>"},{"location":"file_structure/structure/#observables-group","title":"Observables group","text":"<p>Macroscopic observables, or more generally, averages of some property over many particles, are stored in the root group <code>observables</code>. Observables representing only a subset of the particles may be stored in appropriate subgroups similarly to the <code>particles</code> tree. Each observable is stored as an H5MD element. The shape of the corresponding dataset (the element itself for time-independent data and <code>value</code> for time-dependent data) is the tensor shape of the observable, prepended by a <code>[variable]</code> dimension for time-dependent data.</p> <p>The contents of the observables group has the following structure:</p> <pre><code>observables\n \\-- &lt;observable1&gt;\n |    \\-- step: Integer[variable]\n |    \\-- time: Float[variable]\n |    \\-- value: &lt;type&gt;[variable]\n \\-- &lt;observable2&gt;\n |    \\-- step: Integer[variable]\n |    \\-- time: Float[variable]\n |    \\-- value: &lt;type&gt;[variable][D]\n \\-- &lt;group1&gt;\n |    \\-- &lt;observable3&gt;\n |         \\-- step: Integer[variable]\n |         \\-- time: Float[variable]\n |         \\-- value: &lt;type&gt;[variable][D][D]\n \\-- &lt;observable4&gt;: &lt;type&gt;[]\n \\-- ...\n</code></pre>"},{"location":"file_structure/structure/#connectivity-group","title":"Connectivity group","text":"<p>The connectivity information is stored as tuples in the group <code>/connectivity</code>. The tuples are pairs, triples, etc. as needed and may be either time-independent or time-dependent. Several connectivity elements may be defined for any particles group. A connectivity element may only refer to a single particle group.</p> <p>The tuples of particles are interpreted according to the section Storage of particles and tuples lists.</p>"},{"location":"file_structure/structure/#parameters-group","title":"Parameters group","text":"<p>The <code>parameters</code> group stores application-specific, custom data such as control parameters or simulation scripts. The group consists of groups, datasets, and attributes; the detailed structure, however, is left unspecified.</p> <p>The contents of the <code>parameters</code> group could be the following:</p> <pre><code>parameters\n +-- &lt;user_attribute1&gt;\n \\-- &lt;user_data1&gt;\n \\-- &lt;user_group1&gt;\n |    \\-- &lt;user_data2&gt;\n |    \\-- ...\n \\-- ...\n</code></pre>"},{"location":"file_structure/structure/#references","title":"References","text":""},{"location":"file_structure/parameters/force_calculations/","title":"Force calculations","text":"<p>The <code>force_calculations</code> group contains the parameters for force calculations according to the a force field during a molecular dynamics run.</p> <p>The following json template illustrates the structure of the <code>force_calculations</code> group, with example values for clarity:</p> <pre><code>{\n\"vdw_cutoff\": {\"value\": 1.2, \"unit\": \"nm\"},\n\"coulomb_type\": \"particle_mesh_ewald\",\n\"coulomb_cutoff\": {\"value\": 1.2, \"unit\": \"nm\"},\n\"neighbor_searching\": {\n\"neighbor_update_frequency\": 1,\n\"neighbor_update_cutoff\": {\"value\": 1.2, \"unit\": \"nm\"}\n}\n}\n</code></pre> <p>In the following, we provide the NOMAD definitions for each of these quantities:</p> <ul> <li> <p><code>vdw_cutoff</code> :</p> <pre><code>Quantity(\n        type=np.float64,\n        shape=[],\n        unit='m',\n        description='''\n        Cutoff for calculating VDW forces.\n        ''')\n</code></pre> </li> <li> <p><code>coulomb_type</code> :</p> <pre><code>Quantity(\n    type=MEnum('cutoff', 'ewald', 'multilevel_summation', 'particle_mesh_ewald',\n            'particle_particle_particle_mesh', 'reaction_field'),\n    shape=[],\n    description='''\n    Method used for calculating long-ranged Coulomb forces.\n\n    Allowed values are:\n\n    | Barostat Name          | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `\"\"`                   | No thermostat               |\n\n    | `\"Cutoff\"`          | Simple cutoff scheme. |\n\n    | `\"Ewald\"` | Standard Ewald summation as described in any solid-state physics text. |\n\n    | `\"Multi-Level Summation\"` |  D. Hardy, J.E. Stone, and K. Schulten,\n    [Parallel. Comput. **35**, 164](https://doi.org/10.1016/j.parco.2008.12.005)|\n\n    | `\"Particle-Mesh-Ewald\"`        | T. Darden, D. York, and L. Pedersen,\n    [J. Chem. Phys. **98**, 10089 (1993)](https://doi.org/10.1063/1.464397) |\n\n    | `\"Particle-Particle Particle-Mesh\"` | See e.g. Hockney and Eastwood, Computer Simulation Using Particles,\n    Adam Hilger, NY (1989). |\n\n    | `\"Reaction-Field\"` | J.A. Barker and R.O. Watts,\n    [Mol. Phys. **26**, 789 (1973)](https://doi.org/10.1080/00268977300102101)|\n    ''')\n</code></pre> </li> <li> <p><code>coulomb_cutoff</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[],\n    unit='m',\n    description='''\n    Cutoff for calculating short-ranged Coulomb forces.\n    ''')\n</code></pre> </li> <li> <p><code>neighbor_searching</code> : Section containing the parameters for neighbor searching/lists during a molecular dynamics run.</p> </li> <li> <p><code>neighbor_update_frequency</code> :</p> <pre><code>Quantity(\n    type=int,\n    shape=[],\n    description='''\n    Number of timesteps between updating the neighbor list.\n    ''')\n</code></pre> </li> <li> <p><code>neighbor_update_cutoff</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[],\n    unit='m',\n    description='''\n    The distance cutoff for determining the neighbor list.\n    ''')\n</code></pre> </li> </ul>"},{"location":"file_structure/parameters/parameters/","title":"The parameters group","text":"<p>The initial H5MD proposed a simple and flexible schema for the storage of general \"parameter\" information within the <code>parameters</code> group, with the following structure:</p> <pre><code>parameters\n +-- &lt;user_attribute1&gt;\n \\-- &lt;user_data1&gt;\n \\-- &lt;user_group1&gt;\n |    \\-- &lt;user_data2&gt;\n |    \\-- ...\n \\-- ...\n</code></pre> <p>In contrast, the H5MD-NOMAD schema calls for very specific structures to be used when storing parameter information. While the previous groups have attempted to stay away from enforcing NOMAD-specific data structures on the user, instead opting for more intuitive and generally-convenient structures, the <code>parameters</code> group utilizes already-existing metadata and structures within NOMAD to efficiently import simulation parameters in a way that is searcheable and comparable to simulations performed by other users.</p> <p>In this way, the H5MD-NOMAD <code>parameters</code> group has the following structure:</p> <pre><code>parameters\n \\-- &lt;parameter_subgroup_1&gt;\n |    \\-- ...\n \\-- &lt;parameter_subgroup_2&gt;\n |    \\-- ...\n \\-- ...\n</code></pre> <p>The subgroups <code>force_calculations</code> and <code>workflow</code> are supported. The following pages describe the detailed data structures for these subgroups, using the NOMAD MetaInfo definitions for each underlying <code>Quantity</code>. Please note that:</p> <ol> <li> <p>Quantities with <code>type=MEnum()</code> are restricted to the provided allowed values.</p> </li> <li> <p>The unit given in the MetaInfo definition does not have to be used within the H5MD-NOMAD file, however, the dimensionality of the unit should match.</p> </li> </ol>"},{"location":"file_structure/parameters/workflow/","title":"The molecular dynamics workflow","text":"<p>The <code>workflow</code> group contains the parameters for any type of workflow. Here we describe the specific case of the well-defined <code>molecular_dynamics</code> workflow. Custom workflows are described in detail HERE.</p> <p>The following json template illustrates the structure of the <code>molecular_dynamics</code> subsection of the <code>workflow</code> group, with example values for clarity:</p> <pre><code>{\n\"molecular_dynamics\": {\n\"thermodynamic_ensemble\": \"NPT\",\n\"integrator_type\": \"langevin_leap_frog\",\n\"integration_timestep\": {\"value\": 2e-15, \"unit\": \"ps\"},\n\"n_steps\": 20000000,\n\"coordinate_save_frequency\": 10000,\n\"velocity_save_frequency\": null,\n\"force_save_frequency\": null,\n\"thermodynamics_save_frequency\": null,\n\"thermostat_parameters\": {\n\"thermostat_type\": \"langevin_leap_frog\",\n\"reference_temperature\": {\"value\": 300.0, \"unit\": \"kelvin\"},\n\"coupling_constant\": {\"value\": 1.0, \"unit\": \"ps\"}},\n\"barostat_parameters\": {\n\"barostat_type\": \"berendsen\",\n\"coupling_type\": \"isotropic\",\n\"reference_pressure\": {\"value\": [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], \"unit\": \"bar\"},\n\"coupling_constant\": {\"value\": [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]},\n\"compressibility\": {\"value\": [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]}\n}\n}\n}\n</code></pre> <p>In the following, we provide the NOMAD definitions for each of these quantities:</p> <ul> <li> <p><code>thermodynamic_ensemble</code> :</p> <pre><code>Quantity(\n    type=MEnum('NVE', 'NVT', 'NPT', 'NPH'),\n    shape=[],\n    description='''\n    The type of thermodynamic ensemble that was simulated.\n\n    Allowed values are:\n\n    | Thermodynamic Ensemble          | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `\"NVE\"`           | Constant number of particles, volume, and energy |\n\n    | `\"NVT\"`           | Constant number of particles, volume, and temperature |\n\n    | `\"NPT\"`           | Constant number of particles, pressure, and temperature |\n\n    | `\"NPH\"`           | Constant number of particles, pressure, and enthalpy |\n    ''')\n</code></pre> </li> <li> <p><code>integrator_type</code> :         Quantity(             type=MEnum(                 'brownian', 'conjugant_gradient', 'langevin_goga',                 'langevin_schneider', 'leap_frog', 'rRESPA_multitimescale', 'velocity_verlet'             ),             shape=[],             description='''             Name of the integrator.</p> <pre><code>    Allowed values are:\n\n    | Integrator Name          | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\n    S. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n    (https://doi.org/10.1021/ct3000876) |\n\n    | `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n    [Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n    | `\"leap_frog\"`          | R.W. Hockney, S.P. Goel, and J. Eastwood,\n    [J. Comp. Phys. **14**, 148 (1974)](https://doi.org/10.1016/0021-9991(74)90010-2) |\n\n    | `\"velocity_verlet\"` | W.C. Swope, H.C. Andersen, P.H. Berens, and K.R. Wilson,\n    [J. Chem. Phys. **76**, 637 (1982)](https://doi.org/10.1063/1.442716) |\n\n    | `\"rRESPA_multitimescale\"` | M. Tuckerman, B. J. Berne, and G. J. Martyna\n    [J. Chem. Phys. **97**, 1990 (1992)](https://doi.org/10.1063/1.463137) |\n    ''')\n</code></pre> </li> <li> <p><code>integration_timestep</code> :         Quantity(             type=np.float64,             shape=[],             unit='s',             description='''             The timestep at which the numerical integration is performed.             ''')</p> </li> <li> <p><code>n_steps</code> :         Quantity(             type=int,             shape=[],             description='''             Number of timesteps performed.             ''')</p> </li> <li> <p><code>coordinate_save_frequency</code> :         Quantity(             type=int,             shape=[],             description='''             The number of timesteps between saving the coordinates.             ''')</p> </li> <li> <p><code>velocity_save_frequency</code> :         Quantity(             type=int,             shape=[],             description='''             The number of timesteps between saving the velocities.             ''')</p> </li> <li> <p><code>force_save_frequency</code> :         Quantity(             type=int,             shape=[],             description='''             The number of timesteps between saving the forces.             ''')</p> </li> <li> <p><code>thermodynamics_save_frequency</code> :         Quantity(             type=int,             shape=[],             description='''             The number of timesteps between saving the thermodynamic quantities.             ''')</p> </li> <li> <p><code>thermostat_parameters</code> :  Section containing the parameters pertaining to the thermostat for a molecular dynamics run.</p> </li> <li> <p><code>thermostat_type</code> :</p> <pre><code>Quantity(\n    type=MEnum('andersen', 'berendsen', 'brownian', 'langevin_goga', 'langevin_schneider', 'nose_hoover', 'velocity_rescaling',\n            'velocity_rescaling_langevin'),\n    shape=[],\n    description='''\n    The name of the thermostat used for temperature control. If skipped or an empty string is used, it\n    means no thermostat was applied.\n\n    Allowed values are:\n\n    | Thermostat Name        | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `\"\"`                   | No thermostat               |\n\n    | `\"andersen\"`           | H.C. Andersen, [J. Chem. Phys.\n    **72**, 2384 (1980)](https://doi.org/10.1063/1.439486) |\n\n    | `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\n    W. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n    **81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n    | `\"brownian\"`           | Brownian Dynamics |\n\n    | `\"langevin_goga\"`           | N. Goga, A. J. Rzepiela, A. H. de Vries,\n    S. J. Marrink, and H. J. C. Berendsen, [J. Chem. Theory Comput. **8**, 3637 (2012)]\n    (https://doi.org/10.1021/ct3000876) |\n\n    | `\"langevin_schneider\"`           | T. Schneider and E. Stoll,\n    [Phys. Rev. B **17**, 1302](https://doi.org/10.1103/PhysRevB.17.1302) |\n\n    | `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n    (https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n    **31**, 1695 (1985) |\n\n    | `\"velocity_rescaling\"` | G. Bussi, D. Donadio, and M. Parrinello,\n    [J. Chem. Phys. **126**, 014101 (2007)](https://doi.org/10.1063/1.2408420) |\n\n    | `\"velocity_rescaling_langevin\"` | G. Bussi and M. Parrinello,\n    [Phys. Rev. E **75**, 056707 (2007)](https://doi.org/10.1103/PhysRevE.75.056707) |\n    ''')\n</code></pre> </li> <li> <p><code>reference_temperature</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[],\n    unit='kelvin',\n    description='''\n    The target temperature for the simulation.\n    ''')\n</code></pre> </li> <li> <p><code>coupling_constant</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[],\n    unit='s',\n    description='''\n    The time constant for temperature coupling. Need to describe what this means for the various\n    thermostat options...\n    ''')\n</code></pre> </li> <li> <p><code>effective_mass</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[],\n    unit='kilogram',\n    description='''\n    The effective or fictitious mass of the temperature resevoir.\n    ''')\n</code></pre> </li> <li> <p><code>barostat_parameters</code> : Section containing the parameters pertaining to the barostat for a molecular dynamics run.</p> </li> <li> <p><code>barostat_type</code> :</p> <pre><code>Quantity(\n    type=MEnum('berendsen', 'martyna_tuckerman_tobias_klein', 'nose_hoover', 'parrinello_rahman', 'stochastic_cell_rescaling'),\n    shape=[],\n    description='''\n    The name of the barostat used for temperature control. If skipped or an empty string is used, it\n    means no barostat was applied.\n\n    Allowed values are:\n\n    | Barostat Name          | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `\"\"`                   | No thermostat               |\n\n    | `\"berendsen\"`          | H. J. C. Berendsen, J. P. M. Postma,\n    W. F. van Gunsteren, A. DiNola, and J. R. Haak, [J. Chem. Phys.\n    **81**, 3684 (1984)](https://doi.org/10.1063/1.448118) |\n\n    | `\"martyna_tuckerman_tobias_klein\"` | G.J. Martyna, M.E. Tuckerman, D.J. Tobias, and M.L. Klein,\n    [Mol. Phys. **87**, 1117 (1996)](https://doi.org/10.1080/00268979600100761);\n    M.E. Tuckerman, J. Alejandre, R. L\u00f3pez-Rend\u00f3n, A.L. Jochim, and G.J. Martyna,\n    [J. Phys. A. **59**, 5629 (2006)](https://doi.org/10.1088/0305-4470/39/19/S18)|\n\n    | `\"nose_hoover\"`        | S. Nos\u00e9, [Mol. Phys. **52**, 255 (1984)]\n    (https://doi.org/10.1080/00268978400101201); W.G. Hoover, [Phys. Rev. A\n    **31**, 1695 (1985) |\n\n    | `\"parrinello_rahman\"`        | M. Parrinello and A. Rahman,\n    [J. Appl. Phys. **52**, 7182 (1981)](https://doi.org/10.1063/1.328693);\n    S. Nos\u00e9 and M.L. Klein, [Mol. Phys. **50**, 1055 (1983) |\n\n    | `\"stochastic_cell_rescaling\"` | M. Bernetti and G. Bussi,\n    [J. Chem. Phys. **153**, 114107 (2020)](https://doi.org/10.1063/1.2408420) |\n    ''')\n</code></pre> </li> <li> <p><code>coupling_type</code> :</p> <pre><code>Quantity(\n    type=MEnum('isotropic', 'semi_isotropic', 'anisotropic'),\n    shape=[],\n    description='''\n    Describes the symmetry of pressure coupling. Specifics can be inferred from the `coupling constant`\n\n    | Type          | Description                               |\n\n    | ---------------------- | ----------------------------------------- |\n\n    | `isotropic`          | Identical coupling in all directions. |\n\n    | `semi_isotropic` | Identical coupling in 2 directions. |\n\n    | `anisotropic`        | General case. |\n    ''')\n</code></pre> </li> <li> <p><code>reference_pressure</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[3, 3],\n    unit='pascal',\n    description='''\n    The target pressure for the simulation, stored in a 3x3 matrix, indicating the values for individual directions\n    along the diagonal, and coupling between directions on the off-diagonal.\n    ''')\n</code></pre> </li> <li> <p><code>coupling_constant</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[3, 3],\n    unit='s',\n    description='''\n    The time constants for pressure coupling, stored in a 3x3 matrix, indicating the values for individual directions\n    along the diagonal, and coupling between directions on the off-diagonal. 0 values along the off-diagonal\n    indicate no-coupling between these directions.\n    ''')\n</code></pre> </li> <li> <p><code>compressibility</code> :</p> <pre><code>Quantity(\n    type=np.float64,\n    shape=[3, 3],\n    unit='1 / pascal',\n    description='''\n    An estimate of the system's compressibility, used for box rescaling, stored in a 3x3 matrix indicating the values for individual directions\n    along the diagonal, and coupling between directions on the off-diagonal. If None, it may indicate that these values\n    are incorporated into the coupling_constant, or simply that the software used uses a fixed value that is not available in\n    the input/output files.\n    ''')\n</code></pre> </li> </ul>"},{"location":"references/quick_H5MD_basics/","title":"Quick Start - H5MD basics","text":"<p>The following was duplicated or summarized from the H5MD webpage.</p>"},{"location":"references/quick_H5MD_basics/#file-format","title":"File format","text":"<p>H5MD structures are stored in the HDF5 file format version 0 or later. It is recommended to use the HDF5 file format version 2, which includes the implicit tracking of the creation and modification times of the file and of each of its objects.</p>"},{"location":"references/quick_H5MD_basics/#notation-and-naming","title":"Notation and naming","text":"<p>HDF5 files are organized into groups and datasets, summarized as objects, which form a tree structure with the datasets as leaves. Attributes can be attached to each object. The H5MD specification adopts this naming and uses the following notation to depict the tree or its subtrees:</p> <p><code>\\-- item</code> :   An object within a group, that is either a dataset or a group. If it is a     group itself, the objects within the group are indented by five spaces with     respect to the group name.</p> <p><code>+-- attribute</code> :   An attribute, that relates either to a group or a dataset.</p> <p><code>\\-- data: &lt;type&gt;[dim1][dim2]</code> :   A dataset with array dimensions <code>dim1</code> by <code>dim2</code> and of type <code>&lt;type&gt;</code>. The     type is taken from <code>Enumeration</code>, <code>Integer</code>, <code>Float</code> or <code>String</code> and follows     the HDF5 Datatype classes. If the type is not mandated by H5MD, <code>&lt;type&gt;</code> is     indicated. A scalar dataspace is indicated by <code>[]</code>.</p> <p><code>(identifier)</code> :   An optional item.</p> <p><code>&lt;identifier&gt;</code> :   An optional item with unspecified name.</p> <p>H5MD defines a structure called H5MD element (or element whenever there is no confusion). An element is either a time-dependent group or a single dataset (see time-dependent data below), depending on the situation.</p>"},{"location":"references/quick_H5MD_basics/#time-dependent-data","title":"Time-dependent data","text":"<p>Time-dependent data consist of a series of samples (or frames) referring to multiple time steps. Such data are found inside a single dataset and are accessed via dataset slicing. In order to link the samples to the time axis of the simulation, H5MD defines a time-dependent H5MD element as a group that contains, in addition to the actual data, information on the corresponding integer time step and on the physical time. The structure of such a group is:</p> <pre><code>&lt;element&gt;\n \\-- step\n \\-- (time)\n \\-- value: &lt;type&gt;[variable][...]\n</code></pre> <p><code>value</code> :   A dataset that holds the data of the time series. It uses a simple     dataspace whose rank is given by 1 plus the tensor rank of the data stored.     Its shape is the shape of a single data item prepended by a <code>[variable]</code>     dimension that allows the accumulation of samples during the course of     time. For instance, the data shape of scalars has the form <code>[variable]</code>,     <code>D</code>-dimensional vectors use <code>[variable][D]</code>, etc. The first dimension of     <code>value</code> must match the unique dimension of <code>step</code> and <code>time</code>.</p> <p>If several H5MD elements are sampled at equal times, <code>step</code> and <code>time</code> of one element may be hard links to the <code>step</code> and <code>time</code> datasets of a different element. If two elements are sampled at different times (for instance, if one needs the positions more frequently than the velocities), <code>step</code> and <code>time</code> are unique to each of them.</p> <p>The storage of step and time information follows one of the two modes below, depending on the dataset layout of <code>step</code>.</p>"},{"location":"references/quick_H5MD_basics/#explicit-step-and-time-storage","title":"Explicit step and time storage","text":"<pre><code>&lt;element&gt;\n \\-- step: Integer[variable]\n \\-- (time: type[variable])\n \\-- value: &lt;type&gt;[variable][...]\n</code></pre> <p><code>step</code> :   A dataset with dimensions <code>[variable]</code> that contains the time steps at     which the corresponding data were sampled. It is of <code>Integer</code> type to allow     exact temporal matching of data from one H5MD element to another. The     values of the dataset are in monotonically increasing order.</p> <p><code>time</code> :   An optional dataset that is the same as the <code>step</code> dataset, except it is     <code>Float</code> or <code>Integer</code>-valued and contains the simulation time in physical units. The     values of the dataset are in monotonically increasing order.</p>"},{"location":"references/quick_H5MD_basics/#fixed-step-and-time-storage-currently-not-supported-in-h5md-nomad","title":"Fixed step and time storage (currently not supported in H5MD-NOMAD)","text":"<pre><code>&lt;element&gt;\n \\-- step: Integer[]\n     +-- (offset: type[])\n \\-- (time: type[])\n     +-- (offset: type[])\n \\-- value: &lt;type&gt;[variable][...]\n</code></pre> <p><code>step</code> :   A scalar dataset of <code>Integer</code> type that contains the increment of the     time step between two successive rows of data in <code>value</code>.</p> <pre><code>`offset`\n: A scalar attribute of type `Integer` corresponding to the first sampled\nvalue of `step`.\n</code></pre> <p><code>time</code> :   An optional scalar dataset that is the same as the <code>step</code> dataset, except that     it is <code>Float</code> or <code>Integer</code>-valued and contains the increment in simulation     time, in physical units.</p> <p><code>offset</code>     : A scalar attribute of the same type as <code>time</code> corresponding to the first     sampled value of <code>time</code>.</p> <p>For this storage mode, the explicit value \\(s(i)\\) of the step corresponding to the \\(i\\)-th row of the dataset <code>value</code> is \\(s(i) = i\\times\\mathrm{step} + \\mathrm{offset}\\) where \\(\\mathrm{offset}\\) is set to zero if absent. The corresponding formula for the time \\(t(i)\\) is identical: \\(t(i) = i\\times\\mathrm{time} + \\mathrm{offset}\\). The index \\(i\\) is zero-based.</p>"},{"location":"references/quick_H5MD_basics/#time-independent-data","title":"Time-independent data","text":"<p>H5MD defines a time-independent H5MD element as a dataset. As for the <code>value</code> dataset in the case of time-dependent data, data type and array shape are implied by the stored data, where the <code>[variable]</code> dimension is omitted.</p>"},{"location":"references/quick_H5MD_basics/#storage-order-of-arrays","title":"Storage order of arrays","text":"<p>All arrays are stored in C-order as enforced by the HDF5 file format. A C or C++ program may thus declare <code>r[N][D]</code> for the array of particle coordinates while the Fortran program will declare a <code>r(D,N)</code> array (appropriate index ordering for a system of <code>N</code> particles in <code>D</code> spatial dimensions), and the HDF5 file will be the same.</p>"},{"location":"references/quick_H5MD_basics/#storage-of-particles-and-tuples-lists","title":"Storage of particles and tuples lists","text":""},{"location":"references/quick_H5MD_basics/#storage-of-a-list-of-particles","title":"Storage of a list of particles","text":"<p>A list of particles is an H5MD element:</p> <pre><code>&lt;list_name&gt;: Integer[N]\n +-- particles_group: Object reference\n</code></pre> <p>where <code>list_name</code> is a dataset of <code>Integer</code> type and dimensions <code>[N]</code>, N being the number of particle indices stored in the list. <code>particles_group</code> is an attribute containing an HDF5 Object Reference as defined by the HDF5 file format. <code>particles_group</code> must refer to one of the groups in <code>/particles</code>.</p> <p>If a fill value is defined for <code>list_name</code>, the particles indices in <code>list_name</code> set to this value are ignored.</p> <p>If the corresponding <code>particles_group</code> does not possess the <code>id</code> element, the values in <code>list_name</code> correspond to the indexing of the elements in <code>particles_group</code>. Else, the values in <code>list_name</code> must be put in correspondence with the equal values in the <code>id</code> element.</p>"},{"location":"references/quick_H5MD_basics/#storage-of-tuples","title":"Storage of tuples","text":"<p>A list of tuples is an H5MD element:</p> <pre><code>&lt;tuples_list_name&gt;: Integer[N,T]\n +-- particles_group: Object reference\n</code></pre> <p>where <code>N</code> is the length of the list and <code>T</code> is the size of the tuples.  Both <code>N</code> and <code>T</code> may indicate variable dimensions. <code>particles_group</code> is an attribute containing an HDF5 Object Reference, obeying the same rules as for the lists of particles.</p> <p>The interpretation of the values stored within the tuples is done as for a list of particles.</p> <p>If a fill value is defined, tuples with at least one entry set to this value are ignored.</p>"},{"location":"references/quick_H5MD_basics/#time-dependence-time-dependent-particle-lists-currently-not-supported-in-h5md-nomad","title":"Time-dependence (time-dependent particle lists currently not supported in H5MD-NOMAD)","text":"<p>As the lists of particles and tuples above are H5MD elements, they can be stored either as time-dependent groups or time-independent datasets.</p> <p>As an example, a time-dependent list of pairs is stored as:</p> <pre><code>&lt;pair_list_name&gt;\n   +-- particles_group: Object reference\n   \\-- value: Integer[variable,N,2]\n   \\-- step: Integer[variable]\n</code></pre> <p>The dimension denoted by <code>N</code> may be variable.</p>"},{"location":"references/unsupported/","title":"Notable changes from H5MD to H5MD-NOMAD","text":"<p>In order to effectively parse and normalize the molecular simulation data, the H5MD-NOMAD schema extends the original H5MD framework while also enforces various restrictions to the schema. This page contains a list of such additions and restrictions. Here we distinguish between \"unused\" features, i.e., metadata that will be ignored by NOMAD and \"unsupported\" features, i.e., structures that will likely cause an error if used within an H5MD-NOMAD file for upload to NOMAD.</p>"},{"location":"references/unsupported/#new-or-ammended-features","title":"New or ammended features","text":"<ul> <li> <p>additional standardized particles group elements</p> </li> <li> <p>boundary attribute changed to boolean datatype</p> </li> <li> <p>treatment of units</p> </li> </ul>"},{"location":"references/unsupported/#unused-features","title":"Unused features","text":"<ul> <li> <p>modules in h5md metadata</p> </li> <li> <p>arbitrary particle groups not parsed, group labeled <code>all</code> required</p> </li> <li> <p>image, species, and id elements of particles group</p> </li> <li> <p>non-standard elements in particles group</p> </li> </ul>"},{"location":"references/unsupported/#unsupported-features","title":"Unsupported features","text":"<ul> <li> <p>fixed step and time storage</p> </li> <li> <p>time-dependent particle lists</p> </li> <li> <p>time-dependent model labels for particles</p> </li> <li> <p>only partial support for grouping of observables by particle subgroups</p> </li> <li> <p>time-dependent connectivity elements</p> </li> </ul>"},{"location":"references/standard_observables/configurational/","title":"Standardized configurational observables in H5MD","text":"<ul> <li> <p><code>energy quantities</code> :</p> </li> <li> <p><code>radius_of_gyration</code> :</p> </li> </ul>"},{"location":"references/standard_observables/ensemble_average/","title":"Standardized ensemble average observables in H5MD","text":"<ul> <li><code>radial_distribution_function</code> :</li> </ul>"},{"location":"references/standard_observables/time_correlation/","title":"Standardized time correlation observables in H5MD","text":"<ul> <li><code>mean_squared_displacement</code> :</li> </ul>"}]}